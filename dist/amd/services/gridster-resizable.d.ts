import { Disposable } from 'aurelia-framework';
import { GridsterComponent } from '../gridster';
import { GridsterItemComponent } from '../gridster-item';
import { GridsterPush } from './gridster-push';
import { GridsterPushResize } from './gridster-push-resize';
import { GridsterResizeEventType } from '../interfaces/gridster-resize-event-type';
export declare class GridsterResizable {
    gridsterItem: GridsterItemComponent;
    gridster: GridsterComponent;
    lastMouse: {
        clientX: number;
        clientY: number;
    };
    itemBackup: Array<number>;
    resizeEventScrollType: GridsterResizeEventType;
    directionFunction: Function;
    dragFunction: (event: any) => void;
    dragStopFunction: (event: any) => void;
    resizeEnabled: boolean;
    mousemove: Disposable;
    mouseup: Disposable;
    touchmove: Disposable;
    touchend: Disposable;
    touchcancel: Disposable;
    mousedown: Function;
    push: GridsterPush;
    pushResize: GridsterPushResize;
    minHeight: number;
    minWidth: number;
    offsetTop: number;
    offsetLeft: number;
    diffTop: number;
    diffLeft: number;
    diffRight: number;
    diffBottom: number;
    margin: number;
    top: number;
    left: number;
    bottom: number;
    right: number;
    width: number;
    height: number;
    newPosition: number;
    constructor(gridsterItem: GridsterItemComponent, gridster: GridsterComponent);
    dragStart(e: any): void;
    dragMove(e: any): void;
    dragStop(e: any): void;
    cancelResize(): void;
    makeResize(): void;
    handleN(e: any): void;
    handleW(e: any): void;
    handleS(e: any): void;
    handleE(e: any): void;
    handleNW(e: any): void;
    handleNE(e: any): void;
    handleSW(e: any): void;
    handleSE(e: any): void;
    toggle(): void;
    dragStartDelay(e: any): void;
}
